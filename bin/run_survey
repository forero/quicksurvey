#!/usr/bin/env python
"""
vanilla survey strategy
"""

import sys
import os
import numpy as np
sys.path.insert(0, '/gpfs/data/jeforero/quicksurvey/py/')
from quicksurvey import targeting
from quicksurvey import fiberassign 
from quicksurvey import util
from quicksurvey import nextfields
from quicksurvey import recordresults

# load the configuration for this run
util.configuration.setup_survey('survey_config_cosma.cfg')
config = util.configuration.__CONFIG__

# load a mock catalog and perform target selection
# PENDING TO IMPORT

# load pack of unperturbed fibers
fiberlocation = config.get('general', 'desimodel_path'),
fiber_file = os.path.join(config.get('general', 'desimodel_path')
                          , 'data/focalplane/', 'fiberpos.fits')
fiber_pack =  util.FocalPlaneFibers(fiber_file)

#makes a list of all available fields
tile_filename_list = nextfields.select.all_available_files(
    directory=config.get('targeting', 'target_path'), 
    condition="Targets_Tile_*.fits")
n_tiles  = np.size(tile_filename_list)



# initialize an array with all the targets for the whole survey
target_full_pack = util.TargetSurvey(tile_filename_list)
print("The total number of targets is %d"%(target_full_pack.n_targets))

# initializes the tile by tile setup with the observed field information
recordresults.update.initialize_observation_files(tile_filename_list)

# loop over all tiles
for tile in range(n_tiles):
    # resets the fibers
    fiber_pack.reset_all_available()
    fiber_pack.reset_all_targets()
      
    # load the targets
    print('starting the allocation of tile %d - %d more tiles to go'%(tile, n_tiles - tile))
    tile_file = tile_filename_list[tile]
    target_tile_pack = util.TargetTile(tile_file)        
    print target_tile_pack.tile_ra, target_tile_pack.tile_dec, target_tile_pack.n
    
    # find available targets for this set of fibers
    fiberassign.assign.find_available_targets(fiber_pack, target_tile_pack)
    
    # select the target for each fiber
    fiberassign.assign.select_target(fiber_pack, target_tile_pack, target_full_pack)
    
    # observe the tile, i.e. update number of times a given target has been observed
    target_tile_pack.update_results(fiber_pack)

    # updates the global target information where needed
    recordresults.update.update_global_targets(target_full_pack, target_tile_pack)


# updates the observational information on all the other relevant tiles (time consuming!)
# has to be changed to a loop on the files not on the targets
# recordresults.update.sync_observation_files(target_full_pack)

    
